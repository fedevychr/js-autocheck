// Метод addEventListener()

// Подія — це сигнал від браузера про те, що на вебсторінці щось відбулося. Існує багато видів подій: події миші, події клавіатури, події елементів форм, зміни розмірів вікна, завантаження зображень, буфера обміну, зміни стадії CSS анімації або переходу тощо. Події використовуються для реакції на дії користувача й виконання коду, пов'язаного з певною подією.

// Слухач події — це механізм, який "слухає" або "очікує" на виникнення певної події. Метод addEventListener() додає слухача події на елемент.

// element.addEventListener(event, handler, options)

// Аргументи методу:

// event — рядок, що містить ім'я події, наприклад, "click"
// handler — колбек-функція, яка буде викликана під час настання події
// options — необов'язковий об'єкт параметрів із розширеними налаштуваннями

// Давай розглянемо приклад. У тебе на сайті є кнопка для перегортання галереї зображень.

// 1.В HTML є кнопка з класом my-button.

<button class="my-button">Next</button>

// 2.Щоб галерея горталась, тобі потрібно в JavaScript коді отримати посилання на елемент кнопки й додати на нього слухача події кліку.

// const button = document.querySelector(".my-button");

// button.addEventListener("click", () => {
//   console.log("The button was pressed and now the next image will appear");
// });

// У виклик addEventListener() першим аргументом ми передали ім’я події "click" , другим — функцію-обробник подій (event handler) — () => {console.log("Button was clicked")}. Кожного разу, коли на елементі button відбуватиметься подія "click", ця колбек-функція буде виконуватися й виводити в консоль повідомлення "The button was pressed and now the next image will appear".

// Для колбека можна використовувати не анонімну, а окрему функцію, передаючи на неї посилання, як це реалізовано у прикладі нижче. Іменована функція підвищує читабельність коду.

// const button = document.querySelector(".my-button");

// const handleClick = () => {
//   console.log("The button was pressed and now the next image will appear");
// };

// button.addEventListener("click", handleClick);

// !На одному елементі може бути будь-яка кількість обробників подій, навіть подій одного типу. Колбек-функції будуть викликатися в порядку їхньої реєстрації в коді.

///////////////////

// Метод removeEventListener()

// Метод removeEventListener() видаляє слухача події з елемента.

// Аргументи аналогічні методу addEventListener():

// element.removeEventListener(event, handler, options)

// Для того щоб мати можливість видаляти слухача події з елемента через removeEventListener, важливо використовувати ту саму функцію-обробник, яка була призначена в addEventListener. З цієї причини рекомендовано для обробників подій використовувати іменовані функції, які можна легко передавати як аргументи.

// const button = document.querySelector(".my-button");

// const handleClick = () => {
//   console.log("The button was pressed and now the next image will appear");
// };

// button.addEventListener("click", handleClick);

//////////////////

// Об'єкт події

// Для обробки події недостатньо знати, що подія — це клік або натискання клавіші. Розробнику можуть знадобитися інші деталі, а саме: елемент, на якому відбулася подія, його поточне значення текстового поля, вбудовані методи тощо.

// Кожна подія — це об'єкт, який містить інформацію про деталі події та автоматично передається першим аргументом в обробник події. Усі події відбуваються з базового класу Event.

// const handleClick = event => {
//   console.log(event);
// };

// button.addEventListener("click", handleClick);

// Параметр event — це і є об'єкт події, який автоматично передається першим аргументом під час виклику колбек-функції. Ми можемо називати його як завгодно, але, як правило, його оголошують як e, evt або event.

// Деякі властивості об'єкта події:

// event.type — тип події.
// event.currentTarget — елемент, на якому виконується обробник події.

//////////////////

// Події клавіатури

// Існує дві основні події клавіатури:

// keydown — подія, що відбувається при натисканні клавіші
// keyup — подія, що відбувається, коли клавішу відпустили

// На відміну від інших подій, події клавіатури обробляються на документі, а не на конкретному елементі. Об'єкти подій клавіатури походять від базового класу KeyboardEvent.

// document.addEventListener("keydown", event => {
//   console.log("Keydown: ", event);
// });

// document.addEventListener("keyup", event => {
//   console.log("Keyup: ", event);
// });

// Події keydown і keyup спрацьовують при натисканні будь-якої клавіші, включно зі службовими (Ctrl, ShiftAltEscape тощо).

// На практиці переважно обробляють тільки подію keydown, оскільки вона відбувається швидше за keyup і користувач раніше бачить результат натискання.

//////////////////////

// Властивості key і code

// Властивість об’єкта події key повертає символ, згенерований натисканням клавіші на клавіатурі. Ця властивість враховує:

// стан клавіш-модифікаторів, наприклад Shift
// поточну мову

// Властивість об’єкта події code повертає код фізичної клавіші на клавіатурі й не залежить від мови та стану клавіш-модифікаторів.

// document.addEventListener("keydown", event => {
//   console.log("key: ", event.key);
//   console.log("code: ", event.code);
// });

////////////////////

// Клавіші-модифікатори

// Звичайно, тобі відомі популярні комбінації клавіш, такі як Ctrl + s, Ctrl + d або Command + d.

// Деякі комбінації клавіш можуть конфліктувати з поведінкою браузера за замовчуванням. Наприклад, Ctrl + d або Command робить закладку. Потрібно намагатися проєктувати систему комбінацій сторінки таким чином, щоб вона не перетиналася із вбудованою у браузері.

// Для обробки комбінацій клавіш на об'єкті події є властивості:

// ctrlKey
// altKey
// shiftkey
// metaKey

// Ці властивості зберігають булеве значення, яке вказує, чи була затиснута відповідна клавіша-модифікатор.

// document.addEventListener("keydown", event => {
//   if ((event.ctrlKey || event.metaKey) && event.code === "KeyS") {
//     console.log("«Ctrl + s» or «Command + s» combo");
//   }
// });

// !Нещодавно для обробки комбінації клавіш використовували властивість keyCode. Більшість постів на форумах і блогах все ще можуть використовувати її. Пам’ятай: keyCode вже застаріла, і замість неї варто використовувати властивості key і code.

