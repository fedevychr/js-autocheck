// JavaScript у браузері

// Коли JavaScript виконується у браузері, у нього є додатковий функціонал для роботи з вкладкою. Цей функціонал складається з таких модулів: ECMAScript, DOM, BOM.

// ECMAScript (скорочено ES) — це стандарт, який описує мову програмування JavaScript.

// Об'єктна модель документа (Document Object Model) — незалежний інтерфейс для роботи з HTML-документом.

// Об'єктна модель браузера (Browser Object Model) — незалежний від мови інтерфейс для роботи з браузером.

////////////////////////////

// HTML-документ і DOM

// Згідно з DOM-моделлю, кожен тег утворює окремий елемент-вузол (element node), а кожен фрагмент тексту всередині елемента — текстовий вузол (text node).

// HTML-документ — це ієрархічне дерево, у якому кожен елемент (окрім кореневого) вкладений в один батьківський елемент.

/////////////////////////////////

// Як складається DOM-дерево?

// Щоб відобразити HTML-документ, браузер спочатку перетворює його у формат, який він розуміє — DOM. Інтерпретатор браузера має спеціальний фрагмент коду — HTML-парсер, який використовується для перетворення HTML у DOM.

// В HTML вкладеність визначає відносини батько-дитина між елементами. У DOM об'єкти пов'язані в деревоподібній структурі даних, фіксуючи ці відносини.

// Браузер будує DOM поступово, щойно надходять перші фрагменти коду, він починає парсити HTML, додаючи вузли в деревоподібну структуру.

// Після того як DOM-дерево побудовано, у ньому можна знайти елемент за допомогою JavaScript. Оскільки кожен елемент має інтерфейс із безліччю властивостей і методів, з ним можна виконувати необхідні дії.

////////////////////////////

// Структура DOM-дерева

// Для візуалізації дерева HTML-документа використовується сервіс генератор DOM-дерева:

// У дереві виділені два типи вузлів.

// Вузли-елементи (element node) утворюються тегами, зазвичай одні елементи вкладені в інші. Структура дерева утворена виключно за рахунок них.
// Текстові вузли (text node) утворюються текстом всередині елементів.

// З цього правила є винятки:

// пробіли до head ігноруються
// будь-який вміст після body не створює елемент, замість цього браузер переносить його в кінець 'body'

////////////////////////////

// Пошук елементів

// DOM-елемент — це об'єкт із властивостями й методами. Саме час навчитися швидко знаходити елемент за довільним CSS-селектором.

// Група методів elem.querySelector* — це сучасний стандарт для пошуку елементів. Вони дозволяють знайти елемент або групу елементів за CSS-селектором.

// element.querySelector(selector);

// Повертає перший знайдений елемент усередині element, що відповідає рядку CSS-селектора selector. Навіть якщо їх декілька, завжди повернеться посилання тільки на перший елемент у DOM-дереві.
// Якщо нічого не знайдено, то поверне null

// element.querySelectorAll(selector);

// Повертає псевдомасив усіх елементів всередині element, які відповідають CSS-селектору selector
// Якщо нічого не знайдено, поверне порожній масив

///////////////////////////

// Навігація по DOM

// DOM надає широкий спектр можливостей для роботи з елементом і його вмістом. Але щоб скористатися цими можливостями, спочатку потрібно отримати посилання на нього, наприклад, за допомогою методу document.querySelector().

// Елементи DOM-дерева мають ієрархічне відношення один до одного. Для опису відносин використовуються терміни предок (ancestor), нащадок (descendant), батько (parent), дитина (child) і сусід (sibling).

// Для навігації по цій ієрархії елементи мають такі властивості:

// elem.parentNode — містить посилання на батьківський вузол-елемент вузла elem
// elem.childNodes — містить псевдомасив, у якому зібрані всі дочірні вузли-елементи і текстові вузли вузла elem
// elem.children — містить псевдомасив, у якому зібрані всі дочірні вузли-елементи вузла elem, тобто ті, що відповідають тегам
// elem.firstChild — містить посилання на перший дочірній вузол (вузол-елемент або текстовий вузол) вузла elem
// elem.firstElementChild — містить посилання на перший дочірній вузол-елемент усередині elem, тобто той, що відповідає тегу
// elem.lastChild — містить посилання на останній дочірній вузол (вузол-елемент або текстовий вузол) вузла elem
// elem.lastElementChild — містить посилання на останній дочірній вузол-елемент усередині elem, тобто той, що відповідає тегу
// elem.previousSibling — містить посилання на попередній сусідній вузол відносно елемента elem, і це може бути як елемент, так і текстовий вузол
// elem.previousElementSibling — містить посилання на попередній сусідній вузол-елемент відносно елемента elem, тобто той, що відповідає тегу
// elem.nextSibling — містить посилання на наступний сусідній вузол відносно елемента elem, і це може бути як елемент, так і текстовий вузол
// elem.nextElementSibling — містить посилання на наступний сусідній вузол-елемент відносно елемента elem, тобто той, що відповідає тегу

// Зверни увагу! DOM-колекції, такі як childNodes і children — псевдомасиви (NodeList), у них немає більшості методів масиву.
